delimiters "$", "$"

pathPart(recordAndField)::= "$recordAndField.record.className$Optics.$recordAndField.field.name$T"

restPath(path) ::=<<$if(path)$
  .andThen($pathPart(first(path))$)$restPath(rest(path))$$endif$>>

firstPath(path) ::= <<
  $pathPart(first(path))$$restPath(rest(path))$
>>
traversal(details,recordDetails)::=<<
$if(recordDetails.debug)$//$recordDetails$
//$details$
$endif$
 $details: {x | ITraversal<$recordDetails.className$,$x.classAtEnd.string$> $x.name$=
 $firstPath(x.path)$ ;$\n$}$
>>
recordOptic(details,allRecordsAndFields) ::= <<
package $details.packageName$;
import java.util.List;
import one.xingyi.optics.ITraversal;
import one.xingyi.processors.IGeneratedOptics;
import one.xingyi.optics.ILens;
$details.fieldDetails: {x | import $x.fieldType.string$;$\n$}$
$allRecordsAndFields: {rf| import $rf.record.canonicalName$Optics;$\n$}$

public interface $details.className$Optics extends IGeneratedOptics<$details.className$> {
 $details.fieldDetails: {x | ILens<$details.className$,$x.fieldType.shortName$> $x.name$L=ILens.of($details.className$::$x.name$,$x.setter$);$\n$}$
 $details.fieldDetails: {x | $if(x.containedFieldType)$ ITraversal<$details.className$, $x.containedFieldType.shortName$> $x.name$T = ITraversal.from$x.simpleCollectionType.className$Lens($x.name$L);$\n$$endif$}$
 $if(details.addListTraversal)$ ITraversal<List<$details.className$>,$details.className$> listT=ITraversal.listTraversal();$endif$
 $details.traversalDetails:traversal(details)$}
>>
